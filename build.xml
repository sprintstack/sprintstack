<project name="SprintStack" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>
    Distributed + Evented I/O for Rhino
  </description>

  <property name="src" location="src"/>
  <property name="build" location="classes"/>
  <property name="dist"  location="dist"/>
  <property name="lib"  location="lib"/>

  <property name="ivy.install.version" value="2.1.0-rc2" />
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${user.home}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

  <path id="build-classpath" description="The default classpath.">
    <fileset dir="${lib}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <target name="download-ivy" unless="offline">
    <!-- It's best to assume not everybody will have Ivy installed, so
    we'll grab it now. -->
    <mkdir dir="${ivy.jar.dir}"/>
    <get
        src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
        dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="init-ivy" depends="download-ivy">
    <!-- try to load ivy here from ivy home, in case the user has
         not already dropped it into ant's lib dir (note that the
         latter copy will always take precedence).
         We will not fail as long as local lib dir exists (it may
         be empty) and ivy is in at least one of ant's lib dir or the
         local lib dir. -->
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant"
             classpathref="ivy.lib.path"/>
  </target>

  <target name="fetch-deps" depends="init-ivy">
    <mkdir dir="${lib}"/>
    <!-- Retrieves all dependencies from m2 repo -->
    <ivy:retrieve />
  </target>

  <target name="fetch-submodules">
    <exec executable="git">
      <arg line="submodule init"/>
    </exec>
    <exec executable="git">
      <arg line="submodule update"/>
    </exec>
  </target>

  <target name="init" depends="fetch-deps">
    <tstamp/>
    <mkdir dir="${build}"/>
  </target>

  <target name="rhino" depends="fetch-submodules">
    <ant dir="rhino" target="jar" inheritAll="false">
      <property name="jarfile" value="${lib}/js.jar"/>
    </ant>
  </target>

  <target name="compile" depends="init, rhino">
    <javac srcdir="${src}" destdir="${build}" includeantruntime="false">
      <classpath refid="build-classpath"/>
    </javac>
  </target>

  <target name="jar" depends="compile">
    <jar jarfile="${dist}/sprintstack.jar"
         basedir="${build}">
      <manifest>
        <attribute name="Main-Class"
                   value="com.sprintstack.SprintStack" />
      </manifest>
    </jar>
  </target>

  <target name="uberjar" depends="jar">
    <mkdir dir="${dist}"/>
    <jar jarfile="${dist}/sprintstack-standalone.jar"
         compress="true">
      <zipgroupfileset dir="${lib}" includes="*.jar"/>
      <zipgroupfileset dir="${dist}" includes="sprintstack.jar"/>
      <manifest>
        <attribute name="Main-Class"
                   value="com.sprintstack.SprintStack" />
      </manifest>
    </jar>
  </target>

  <target name="clean">
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="${lib}"/>
  </target>
</project>
